cPhysicalUnit`0`x`()->Category``PUNIT`\indented{1}{Author: Kurt Pagani} Date Created: 2012 License: \spad{BSD2} =================================== Rational Interval Arithmetics (RIA) =================================== This is an implementation of RIA as a FriCAS domain. Ref. "Guaranteed Proofs Using Interval Arithmetic" by Marc Daumas,{} Guillaume Melquiond,{} and Cesar Munoz See docs for more information. \blankline Version: 15-NOV-2015 \blankline \blankline
dPhysQty`1`x`(PhysicalUnit)->Join(CoercibleTo(OutputForm),etc)`(U)`PQTY`\indented{1}{Author: Kurt Pagani} Date Created: 2012 License: \spad{BSD2} =================================== Rational Interval Arithmetics (RIA) =================================== This is an implementation of RIA as a FriCAS domain. Ref. "Guaranteed Proofs Using Interval Arithmetic" by Marc Daumas,{} Guillaume Melquiond,{} and Cesar Munoz See docs for more information. \blankline Version: 15-NOV-2015 \blankline \blankline
dRationalInterval`0`x`()->Join(CoercibleTo(OutputForm),etc)``RIA`\indented{1}{Author: Kurt Pagani} Date Created: 2012 License: \spad{BSD2} =================================== Rational Interval Arithmetics (RIA) =================================== This is an implementation of RIA as a FriCAS domain. Ref. "Guaranteed Proofs Using Interval Arithmetic" by Marc Daumas,{} Guillaume Melquiond,{} and Cesar Munoz See docs for more information. \blankline Version: 15-NOV-2015 \blankline \blankline
dSI`0`x`()->Join(PhysicalUnit,etc)``SI`\indented{1}{Author: Kurt Pagani} Date Created: 2012 License: \spad{BSD2} =================================== Rational Interval Arithmetics (RIA) =================================== This is an implementation of RIA as a FriCAS domain. Ref. "Guaranteed Proofs Using Interval Arithmetic" by Marc Daumas,{} Guillaume Melquiond,{} and Cesar Munoz See docs for more information. \blankline Version: 15-NOV-2015 \blankline \blankline
dSIunit`0`x`()->Join(PhysicalUnit,etc)``SI`\indented{1}{Author: Kurt Pagani} Date Created: 2012 License: \spad{BSD2} =================================== Rational Interval Arithmetics (RIA) =================================== This is an implementation of RIA as a FriCAS domain. Ref. "Guaranteed Proofs Using Interval Arithmetic" by Marc Daumas,{} Guillaume Melquiond,{} and Cesar Munoz See docs for more information. \blankline Version: 15-NOV-2015 \blankline \blankline
o%A`1`x`(Integer)->_$`dSI``
o%A`1`x`(Integer)->_$`dSIunit``
o%K`1`x`(Integer)->_$`dSI``
o%K`1`x`(Integer)->_$`dSIunit``
o%cd`1`x`(Integer)->_$`dSI``
o%cd`1`x`(Integer)->_$`dSIunit``
o%kg`1`x`(Integer)->_$`dSI``
o%kg`1`x`(Integer)->_$`dSIunit``
o%m`1`x`(Integer)->_$`dSI``
o%m`1`x`(Integer)->_$`dSIunit``
o%mol`1`x`(Integer)->_$`dSI``
o%mol`1`x`(Integer)->_$`dSIunit``
o%one`0`x`()->_$`cPhysicalUnit``
o%s`1`x`(Integer)->_$`dSI``
o%s`1`x`(Integer)->_$`dSIunit``
o*`2`x`(_$,_$)->_$`cPhysicalUnit``
o*`2`x`(_$,_$)->_$`dPhysQty(U)``
o*`2`x`(_$,_$)->_$`dRationalInterval``
o+`2`x`(_$,_$)->_$`dPhysQty(U)``
o+`2`x`(_$,_$)->_$`dRationalInterval``
o-`1`x`(_$)->_$`dPhysQty(U)``
o-`1`x`(_$)->_$`dRationalInterval``
o-`2`x`(_$,_$)->_$`dPhysQty(U)``
o-`2`x`(_$,_$)->_$`dRationalInterval``
o/`2`x`(_$,_$)->_$`cPhysicalUnit``
o/`2`x`(_$,_$)->_$`dPhysQty(U)``
o/`2`x`(_$,_$)->_$`dRationalInterval``
o=`2`x`(_$,_$)->Boolean`cPhysicalUnit``
oSI_derived`1`x`(String)->_$`dSI``
oSIderived`1`x`(String)->_$`dSIunit``
o^`2`x`(_$,Integer)->_$`cPhysicalUnit``
o^`2`x`(_$,Integer)->_$`dPhysQty(U)``
o^`2`x`(_$,Integer)->_$`dRationalInterval``
oabs`1`x`(_$)->_$`dRationalInterval``
obuck`1`x`(Table(Symbol,_$))->List(Expression(Integer))`dSI``
obuck`1`x`(Table(Symbol,_$))->List(Expression(Integer))`dSIunit``
ocoerce`1`x`(DecimalExpansion)->_$`dRationalInterval``
ocoerce`1`x`(DoubleFloat)->_$`dRationalInterval``
ocoerce`1`x`(Float)->_$`dRationalInterval``
ocoerce`1`x`(List(Fraction(Integer)))->_$`dRationalInterval``
ocoerce`1`x`(_$)->OutputForm`cPhysicalUnit``
ocoerce`1`x`(_$)->OutputForm`dPhysQty(U)``
ocoerce`1`x`(_$)->OutputForm`dRationalInterval``
oconcise`1`x`(_$)->OutputForm`dRationalInterval``
oelt`2`x`(Fraction(Integer),_$)->_$`dPhysQty(U)``
oelt`2`x`(Fraction(Integer),_$)->_$`dRationalInterval``
oelt`2`x`(RationalInterval,U)->_$`dPhysQty(U)``
oelt`2`x`(Union(Fraction(Integer),Float,DoubleFloat,Integer),U)->_$`dPhysQty(U)``
ofrep`1`x`(_$)->OutputForm`dRationalInterval``
olb`1`x`(_$)->Fraction(Integer)`dRationalInterval``
olen`1`x`(_$)->Fraction(Integer)`dRationalInterval``
omid`1`x`(_$)->Fraction(Integer)`dRationalInterval``
omki`2`x`(Fraction(Integer),Fraction(Integer))->_$`dRationalInterval``
omksi`1`x`(List(Integer))->_$`dSI``
omksi`1`x`(List(Integer))->_$`dSIunit``
opqtyError`1`x`(_$)->Fraction(Integer)`dPhysQty(U)``
opqtyInterval`1`x`(_$)->RationalInterval`dPhysQty(U)``
opqtyScale`2`x`(_$,Fraction(Integer))->_$`dPhysQty(U)``
opqtyUnit`1`x`(_$)->U`dPhysQty(U)``
opqtyValue`1`x`(_$)->Fraction(Integer)`dPhysQty(U)``
opqty`3`x`(Fraction(Integer),Fraction(Integer),U)->_$`dPhysQty(U)``
osi2l`1`x`(_$)->List(Integer)`dSI``
osi2l`1`x`(_$)->List(Integer)`dSIunit``
otm_frep`1`x`(_$)->OutputForm`dRationalInterval``
oub`1`x`(_$)->Fraction(Integer)`dRationalInterval``
