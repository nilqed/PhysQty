5353                (|PhysQty| U)
|domain|
(((|PhysQty| |#1|)
  (|Join| (|CoercibleTo| (|OutputForm|))
          (CATEGORY |domain| (SIGNATURE * ($ $ $)) (SIGNATURE / ($ $ $))
           (SIGNATURE + ($ $ $)) (SIGNATURE - ($ $ $))
           (SIGNATURE ^ ($ $ (|Integer|))) (SIGNATURE - ($ $))
           (SIGNATURE |elt| ($ (|Fraction| (|Integer|)) $))
           (SIGNATURE |elt| ($ (|RationalInterval|) |#1|))
           (SIGNATURE |elt|
            ($
             (|Union| (|Fraction| (|Integer|)) (|Float|) (|DoubleFloat|)
                      (|Integer|))
             |#1|))
           (SIGNATURE |coerce| ((|OutputForm|) $))
           (SIGNATURE |pqty|
            ($ (|Fraction| (|Integer|)) (|Fraction| (|Integer|)) |#1|))
           (SIGNATURE |pqtyValue| ((|Fraction| (|Integer|)) $))
           (SIGNATURE |pqtyError| ((|Fraction| (|Integer|)) $))
           (SIGNATURE |pqtyUnit| (|#1| $))
           (SIGNATURE |pqtyInterval| ((|RationalInterval|) $))
           (SIGNATURE |pqtyScale| ($ $ (|Fraction| (|Integer|))))))
  (|PhysicalUnit|))
 (T |PhysQty|))
(|Join| (|CoercibleTo| (|OutputForm|))
        (CATEGORY |domain| (SIGNATURE * ($ $ $)) (SIGNATURE / ($ $ $))
         (SIGNATURE + ($ $ $)) (SIGNATURE - ($ $ $))
         (SIGNATURE ^ ($ $ (|Integer|))) (SIGNATURE - ($ $))
         (SIGNATURE |elt| ($ (|Fraction| (|Integer|)) $))
         (SIGNATURE |elt| ($ (|RationalInterval|) |#1|))
         (SIGNATURE |elt|
          ($
           (|Union| (|Fraction| (|Integer|)) (|Float|) (|DoubleFloat|)
                    (|Integer|))
           |#1|))
         (SIGNATURE |coerce| ((|OutputForm|) $))
         (SIGNATURE |pqty|
          ($ (|Fraction| (|Integer|)) (|Fraction| (|Integer|)) |#1|))
         (SIGNATURE |pqtyValue| ((|Fraction| (|Integer|)) $))
         (SIGNATURE |pqtyError| ((|Fraction| (|Integer|)) $))
         (SIGNATURE |pqtyUnit| (|#1| $))
         (SIGNATURE |pqtyInterval| ((|RationalInterval|) $))
         (SIGNATURE |pqtyScale| ($ $ (|Fraction| (|Integer|))))))
"/home/kfp/Development/physqty/Untitled Folder/../pqty.spad"
((|coerce| (*1 *2 *1)
           (AND (|isDomain| *2 (|OutputForm|)) (|isDomain| *1 (|PhysQty| *3))
                (|ofCategory| *3 (|PhysicalUnit|))))
 (* (*1 *1 *1 *1)
    (AND (|isDomain| *1 (|PhysQty| *2)) (|ofCategory| *2 (|PhysicalUnit|))))
 (/ (*1 *1 *1 *1)
    (AND (|isDomain| *1 (|PhysQty| *2)) (|ofCategory| *2 (|PhysicalUnit|))))
 (+ (*1 *1 *1 *1)
    (AND (|isDomain| *1 (|PhysQty| *2)) (|ofCategory| *2 (|PhysicalUnit|))))
 (- (*1 *1 *1 *1)
    (AND (|isDomain| *1 (|PhysQty| *2)) (|ofCategory| *2 (|PhysicalUnit|))))
 (^ (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|PhysQty| *3))
       (|ofCategory| *3 (|PhysicalUnit|))))
 (- (*1 *1 *1)
    (AND (|isDomain| *1 (|PhysQty| *2)) (|ofCategory| *2 (|PhysicalUnit|))))
 (|elt| (*1 *1 *2 *1)
  (AND (|isDomain| *2 (|Fraction| (|Integer|))) (|isDomain| *1 (|PhysQty| *3))
       (|ofCategory| *3 (|PhysicalUnit|))))
 (|elt| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|RationalInterval|)) (|isDomain| *1 (|PhysQty| *3))
       (|ofCategory| *3 (|PhysicalUnit|))))
 (|elt| (*1 *1 *2 *3)
  (AND
   (|isDomain| *2
               (|Union| (|Fraction| (|Integer|)) (|Float|) (|DoubleFloat|)
                        (|Integer|)))
   (|isDomain| *1 (|PhysQty| *3)) (|ofCategory| *3 (|PhysicalUnit|))))
 (|pqty| (*1 *1 *2 *2 *3)
  (AND (|isDomain| *2 (|Fraction| (|Integer|))) (|isDomain| *1 (|PhysQty| *3))
       (|ofCategory| *3 (|PhysicalUnit|))))
 (|pqtyValue| (*1 *2 *1)
  (AND (|isDomain| *2 (|Fraction| (|Integer|))) (|isDomain| *1 (|PhysQty| *3))
       (|ofCategory| *3 (|PhysicalUnit|))))
 (|pqtyError| (*1 *2 *1)
  (AND (|isDomain| *2 (|Fraction| (|Integer|))) (|isDomain| *1 (|PhysQty| *3))
       (|ofCategory| *3 (|PhysicalUnit|))))
 (|pqtyUnit| (*1 *2 *1)
  (AND (|isDomain| *1 (|PhysQty| *2)) (|ofCategory| *2 (|PhysicalUnit|))))
 (|pqtyInterval| (*1 *2 *1)
  (AND (|isDomain| *2 (|RationalInterval|)) (|isDomain| *1 (|PhysQty| *3))
       (|ofCategory| *3 (|PhysicalUnit|))))
 (|pqtyScale| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|Fraction| (|Integer|))) (|isDomain| *1 (|PhysQty| *3))
       (|ofCategory| *3 (|PhysicalUnit|)))))
((|pqtyValue| (((|Fraction| (|Integer|)) $) 16)) (|pqtyUnit| ((|#1| $) 22))
 (|pqtyScale| (($ $ (|Fraction| (|Integer|))) 42))
 (|pqtyInterval| (((|RationalInterval|) $) 23))
 (|pqtyError| (((|Fraction| (|Integer|)) $) 21))
 (|pqty| (($ (|Fraction| (|Integer|)) (|Fraction| (|Integer|)) |#1|) 14))
 (|elt| (($ (|Fraction| (|Integer|)) $) 43) (($ (|RationalInterval|) |#1|) 44)
  (($ (|Union| (|Fraction| (|Integer|)) (|Float|) (|DoubleFloat|) (|Integer|))
    |#1|)
   46))
 (|coerce| (((|OutputForm|) $) 52)) (^ (($ $ (|Integer|)) 38)) (/ (($ $ $) 29))
 (- (($ $ $) 35) (($ $) 40)) (+ (($ $ $) 33)) (* (($ $ $) 26)))
PQTY
(((|CoercibleTo| (|OutputForm|)) . T))
(((|CoercibleTo| (|OutputForm|)) . T))
((|constructor|
  (NIL
   "\\indented{1}{Author: Kurt Pagani} Date Created: 2012 License: \\spad{BSD2} =================================== Rational Interval Arithmetics (RIA) =================================== This is an implementation of RIA as a FriCAS domain. Ref. \"Guaranteed Proofs Using Interval Arithmetic\" by Marc Daumas,{} Guillaume Melquiond,{} and Cesar Munoz See docs for more information. \\blankline Version: 15-NOV-2015 \\blankline \\blankline")))
(("documentation" 0 4887) ("ancestors" 0 4848) ("parents" 0 4809)
 ("abbreviation" 0 4804) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 4186) ("modemaps" 0 2073) ("sourceFile" 0 2012)
 ("constructorCategory" 0 1074) ("constructorModemap" 0 43)
 ("constructorKind" 0 34) ("constructorForm" 0 20))